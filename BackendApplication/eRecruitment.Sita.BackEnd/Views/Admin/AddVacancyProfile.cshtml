@model eRecruitment.BusinessDomain.DAL.Entities.AppModels.JobProfileModel
<!-- Content Wrapper. Contains page content -->
<link rel="stylesheet" href="~/Content/plugins/bootstrap-wysihtml5/bootstrap3-wysihtml5.min.css">
<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <style>
            .box .wysihtml5-toolbar {
                visibility: hidden;
            }

            .textarea {
                width: 1200px;
                border: hidden;
            }
        </style>
        <h1>
            Manage Job Profile
        </h1>
        <ol class="breadcrumb">
            <li><a href="#"><i class="fa fa-wrench"></i> Administration</a></li>
            <li><a href="~/Admin/JobLevelList">Vacancy Profile</a></li>
            <li class="active">Add Vacancy Profile</li>
        </ol>
    </section>
    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title">Job Profile</h3>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                            title="Collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-widget="remove" disabled data-toggle="tooltip" title="Remove">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="box-body">

                @using (Html.BeginForm("AddVacancyProfile", "Admin", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary("", new { @class = "text-danger" })
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <div class="col-md-12">
                                    <label>Organisation Name:</label>
                                    @if (ViewBag.Organisation != null)
                                    {
                                        foreach (var d in ViewBag.Organisation)
                                        {
                                            <div class="form-control" readonly>
                                                <label>
                                                    <input type="text"
                                                           name="Organisation"
                                                           hidden value="@d.OrganisationID" /> @d.OrganisationName
                                                    </label>
                                                </div>
                                            }
                                        }
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <div class="col-md-12">
                                    <label>Job Title:<span class="required" style="color:red;"> * </span></label>
                                    @Html.DropDownListFor(Model => Model.JobTitleID, new SelectList(ViewBag.JobTitle, "JobTitleID", "JobTitle"), "--Select Job Title --", new { @class = "form-control select2", required = "Required", tabindex = 1, onChange = "GetSalaryStructure()" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="form-group">
                                <div class="col-md-12">
                                    <label>Salary Category:</label>
                                    @Html.TextBoxFor(Model => Model.CategoryDescr, new { @id = "SalaryCat", @class = "form-control", @readonly = "readonly", placeholder = "Salary Category", tabindex = 2 })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    <label>Salary Sub-Category:</label>
                                    @Html.TextBoxFor(Model => Model.Descr, new { @id = "SalarySubCat", @class = "form-control", placeholder = "Salary Sub-Category", @readonly = "readonly", tabindex = 2 })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    <label>Job Level:</label>
                                    @Html.TextBoxFor(Model => Model.JobLevelName, new { @id = "JobLevel", @class = "form-control", placeholder = "Job Level", @readonly = "readonly", tabindex = 2 })
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="col-md-12">
                                        <label> Minimum Value:</label>
                                        @Html.TextBoxFor(Model => Model.MinValue, new { @id = "Min", @class = "form-control", placeholder = " Minimum Value", @readonly = "readonly", tabindex = 2 })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="col-md-12">
                                        <label> Maximum Value:</label>
                                        @Html.TextBoxFor(Model => Model.MaxValue, new { @id = "Max", @class = "form-control", placeholder = "  Maximum Value", @readonly = "readonly", tabindex = 2 })
                                    </div>
                                </div>
                            </div>

                            @*<div class="form-group">
                                    <div class="col-md-12">
                                        <label>Skill Category:<span class="required" style="color:red;"> * </span></label>
                                        @Html.DropDownListFor(Model => Model.CategoryID, new SelectList(ViewBag.SkillsCategoryList, "CategoryID", "Description"), "--Select Skill Category --", new { @class = "form-control", required = "Required", tabindex = 1, onChange = "GetSkillsPerCatergory()" })
                                    </div>
                                </div>

                                <div class="col-md-12">
                                    <div class="box box-warning">
                                        <div class="box-header with-border">
                                            <h3 class="box-title">Skills<span class="required" style="color:red;"> * </span></h3>
                                        </div>
                                        <!-- /.box-header -->
                                        <div class="box-body" id="Skills">

                                        </div>
                                        <!-- /.box-body -->
                                    </div>
                                </div>*@

                            <div class="form-group">
                                <div class="col-md-12">
                                    <label>Purpose of the Job:<span class="required" style="color:red;"> * </span></label>
                                    @Html.TextAreaFor(Model => Model.VacancyPurpose, new { @class = "form-control", placeholder = "Purpose of the Job", required = "Required", tabindex = 2 })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    <label>Key Responsibilities:<span class="required" style="color:red;"> * </span></label>
                                    @Html.TextAreaFor(Model => Model.Responsibility, new { @class = "form-control",@style = "width: 100%; height: 200px; font-size: 14px; line-height: 18px; border: 1px solid #dddddd; padding: 10px;", placeholder = "Responsibility", required = "Required", tabindex = 2 })
                                    
                                    
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    <label>Qualifications and Experience:<span class="required" style="color:red;"> * </span></label>
                                    @Html.TextAreaFor(Model => Model.QualificationAndExperience, new { @class = "form-control", placeholder = "Qualifications and Experience", required = "Required", tabindex = 2 })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    <label>Knowledge:<span class="required" style="color:red;"> * </span></label>
                                    @Html.TextAreaFor(Model => Model.Knowledge, new { @class = "form-control", placeholder = "Knowledge", required = "Required", tabindex = 2 })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    <label>Technical Competencies:</label><br />
                                    @Html.DropDownListFor(Model => Model.SelectedTechComps, new MultiSelectList(ViewBag.TechComp, "TechnicalCompetencyID", "TechnicalComp"), new { @class = "form-control", id = "lstChosenTech", multiple = "multiple", buttonWidth = "25%" })
                                    <br />
                                    @Html.TextArea("TechComps", new { @class = "form-control", placeholder = "Technical Competency Descriptions", @readonly = "readonly", tabindex = 2 })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    <label>Leadership Competencies:</label><br />
                                    @Html.ListBoxFor(Model => Model.SelectedLeadComps, new MultiSelectList(ViewBag.LeadComp, "LeadershipCompetencyID", "LeadershipComp"), new { @class = "form-control", id = "lstChosenLead", multiple = "multiple" })
                                    <br />
                                    @Html.TextArea("LeadComps", new { @class = "form-control", placeholder = "Leadership Competency Descriptions", @readonly = "readonly", tabindex = 2 })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    <label>Interpersonal / Behavioural Competencies:</label><br />
                                    @Html.ListBoxFor(Model => Model.SelectedBehaveComps, new MultiSelectList(ViewBag.BehaveComp, "BehaviouralCompetencyID", "BehaviouralComp"), new { @class = "form-control", id = "lstChosenBehave", multiple = "multiple" })
                                    <br />
                                    @Html.TextArea("BehaveComps", new { @class = "form-control", placeholder = "Interpersonal / Behavioural Competency Descriptions", @readonly = "readonly", tabindex = 2 })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    <label>Additional Requirements:<span class="required" style="color:red;"> * </span></label>
                                    @Html.TextAreaFor(Model => Model.AdditionalRequirements, new { @class = "form-control", placeholder = "Additional Requirements", required = "Required", tabindex = 2 })
                                </div>
                            </div>

                            <div class="col-md-12">
                                <label>Disclaimer:</label>
                                @if (ViewBag.Disclamer != null)
                                {
                                    foreach (var d in ViewBag.Disclamer)
                                    {
                                        <div class="box">
                                            <textarea class="textarea" id="some-textarea" disabled>@d.DisclaimerDescr"</textarea>
                                            
                                        </div>
                                        
                                        }
                                    }
                            </div>

                            <div class="clearfix"></div><br /> <br /><br /><br /><br /><br />
                            <div class="col-md-12 pull-right">
                                <input type="submit" class="btn btn-success" value="Save" /> |
                                <a href="@Url.Action("VacancyProfileList", "Admin")" onclick="return confirm('Are you sure you want to cancel?')" type="button" class="btn btn-danger">
                                    Cancel
                                </a>
                            </div>
                        </div>
                    </div>

                }
            </div>
            <!-- /.box-body -->
            <div class="box-footer">
                &nbsp;
            </div>
            <!-- /.box-footer-->
        </div>
        <!-- /.box -->
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

<script src="~/Scripts/DropDownListValues.js"></script>

<script type="text/javascript">

    $(document).ready(function () {

        $("#lstChosenTech").multiselect({
            dropRight: true,
            buttonWidth: '450px',
            maxHeight: 375,
            disabled: 'disabled',
            onChange: function (element) {
                var values = "";
                var definitions = "";
                var selected = $("[id*=lstChosenTech] option:selected");
                selected.each(function () {
                    //values += $(this).html() + " " + $(this).val() + "\n";
                    values += $(this).val() + ";"
                });

                if (values.length > 0) {
                    $.post('@Url.Action("GetTechCompPerIDs")',
                    { ids: values }, function (data) {
                        if (data != null && !jQuery.isEmptyObject(data)) {
                            var TechComp = document.getElementById("TechComps");

                            data.forEach(function (item) {
                                definitions += item.TechnicalComp + " \n\n" + item.TechnicalCompDesc + " \n\n";
                            });

                            definitions = definitions.substr(0, definitions.length - 4);

                            TechComp.value = definitions;
                        }
                        else { alert("Error : Could not find definitions for Technical Competencies "); }

                    });
                }
            }
        });

        $("#lstChosenLead").multiselect({
            dropRight: true,
            buttonWidth: '375px',
            maxHeight: 400,
            onChange: function (element) {
                var values = "";
                var definitions = "";
                var selected = $("[id*=lstChosenLead] option:selected");
                selected.each(function () {
                    //values += $(this).html() + " " + $(this).val() + "\n";
                    values += $(this).val() + ";"
                });

                if (values.length > 0) {
                    $.post('@Url.Action("GetLeadCompPerIDs")',
                    { ids: values }, function (data) {
                        if (data != null && !jQuery.isEmptyObject(data)) {
                            var LeadComp = document.getElementById("LeadComps");

                            data.forEach(function (item) {
                                definitions += item.LeadershipComp + " \n\n" + item.LeadershipCompDesc + " \n\n";
                            });

                            definitions = definitions.substr(0, definitions.length - 4);

                            LeadComp.value = definitions;
                        }
                        else { alert("Error : Could not find definitions for Leadership Competencies "); }

                    });
                }
            }
        });

        $("#lstChosenBehave").multiselect({
            dropRight: true,
            buttonWidth: '225px',
            maxHeight: 400,
            onChange: function (element) {
                var values = "";
                var definitions = "";
                var selected = $("[id*=lstChosenBehave] option:selected");
                selected.each(function () {
                    //values += $(this).html() + " " + $(this).val() + "\n";
                    values += $(this).val() + ";"
                });

                if (values.length > 0) {
                    $.post('@Url.Action("GetBehaveCompPerIDs")',
                    { ids: values }, function (data) {
                        if (data != null && !jQuery.isEmptyObject(data)) {
                            var BehaveComp = document.getElementById("BehaveComps");

                            data.forEach(function (item) {
                                definitions += item.BehaviouralComp + " \n\n" + item.BehaviouralCompDesc + " \n\n";
                            });

                            definitions = definitions.substr(0, definitions.length - 4);

                            BehaveComp.value = definitions;
                        }
                        else { alert("Error : Could not find definitions for Behavioural Competencies "); }

                    });
                }
            }
        });

    });

</script>

<!-- CK Editor -->
<script src="~/Content/bower_components/ckeditor/ckeditor.js"></script>
<!-- Bootstrap WYSIHTML5 -->
<script src="~/Content/plugins/bootstrap-wysihtml5/bootstrap3-wysihtml5.all.min.js"></script>
<script>
    $(function () {
        // Replace the <textarea id="editor1"> with a CKEditor
        // instance, using default configuration.
        CKEDITOR.replace('editor1')
        //bootstrap WYSIHTML5 - text editor
        $('.textarea').wysihtml5()
    })
</script>